// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.kingkey.qn.web;

import com.kingkey.qn.domain.Answer;
import com.kingkey.qn.domain.AnswerSheet;
import com.kingkey.qn.domain.Department;
import com.kingkey.qn.domain.Questionnaire;
import com.kingkey.qn.domain.SystemUser;
import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect AnswerSheetController_Roo_Controller {
    
    @Autowired
    private GenericConversionService AnswerSheetController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String AnswerSheetController.create(@Valid AnswerSheet answerSheet, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("answerSheet", answerSheet);
            addDateTimeFormatPatterns(model);
            return "answersheets/create";
        }
        answerSheet.persist();
        return "redirect:/answersheets/" + encodeUrlPathSegment(answerSheet.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String AnswerSheetController.createForm(Model model) {
        model.addAttribute("answerSheet", new AnswerSheet());
        addDateTimeFormatPatterns(model);
        return "answersheets/create";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String AnswerSheetController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("answersheets", AnswerSheet.findAnswerSheetEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) AnswerSheet.countAnswerSheets() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("answersheets", AnswerSheet.findAllAnswerSheets());
        }
        addDateTimeFormatPatterns(model);
        return "answersheets/list";
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String AnswerSheetController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("answerSheet", AnswerSheet.findAnswerSheet(id));
        addDateTimeFormatPatterns(model);
        return "answersheets/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String AnswerSheetController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        AnswerSheet.findAnswerSheet(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/answersheets?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @RequestMapping(params = { "find=ByQuestionnaireAndAnsweredUser", "form" }, method = RequestMethod.GET)
    public String AnswerSheetController.findAnswerSheetsByQuestionnaireAndAnsweredUserForm(Model model) {
        model.addAttribute("questionnaires", Questionnaire.findAllQuestionnaires());
        model.addAttribute("systemusers", SystemUser.findAllSystemUsers());
        return "answersheets/findAnswerSheetsByQuestionnaireAndAnsweredUser";
    }
    
    @RequestMapping(params = "find=ByQuestionnaireAndAnsweredUser", method = RequestMethod.GET)
    public String AnswerSheetController.findAnswerSheetsByQuestionnaireAndAnsweredUser(@RequestParam("questionnaire") Questionnaire questionnaire, @RequestParam("answeredUser") SystemUser answeredUser, Model model) {
        model.addAttribute("answersheets", AnswerSheet.findAnswerSheetsByQuestionnaireAndAnsweredUser(questionnaire, answeredUser).getResultList());
        return "answersheets/list";
    }
    
    @ModelAttribute("answers")
    public Collection<Answer> AnswerSheetController.populateAnswers() {
        return Answer.findAllAnswers();
    }
    
    @ModelAttribute("departments")
    public Collection<Department> AnswerSheetController.populateDepartments() {
        return Department.findAllDepartments();
    }
    
    @ModelAttribute("questionnaires")
    public Collection<Questionnaire> AnswerSheetController.populateQuestionnaires() {
        return Questionnaire.findAllQuestionnaires();
    }
    
    @ModelAttribute("systemusers")
    public Collection<SystemUser> AnswerSheetController.populateSystemUsers() {
        return SystemUser.findAllSystemUsers();
    }
    
    Converter<Answer, String> AnswerSheetController.getAnswerConverter() {
        return new Converter<Answer, String>() {
            public String convert(Answer answer) {
                return new StringBuilder().append(answer.getCompletion()).toString();
            }
        };
    }
    
    Converter<AnswerSheet, String> AnswerSheetController.getAnswerSheetConverter() {
        return new Converter<AnswerSheet, String>() {
            public String convert(AnswerSheet answerSheet) {
                return new StringBuilder().append(answerSheet.getAnsweredDate()).toString();
            }
        };
    }
    
    Converter<Department, String> AnswerSheetController.getDepartmentConverter() {
        return new Converter<Department, String>() {
            public String convert(Department department) {
                return new StringBuilder().append(department.getName()).toString();
            }
        };
    }
    
    Converter<Questionnaire, String> AnswerSheetController.getQuestionnaireConverter() {
        return new Converter<Questionnaire, String>() {
            public String convert(Questionnaire questionnaire) {
                return new StringBuilder().append(questionnaire.getSubject()).append(" ").append(questionnaire.getDescription()).append(" ").append(questionnaire.getCreatedDate()).toString();
            }
        };
    }
    
    Converter<SystemUser, String> AnswerSheetController.getSystemUserConverter() {
        return new Converter<SystemUser, String>() {
            public String convert(SystemUser systemUser) {
                return new StringBuilder().append(systemUser.getName()).append(" ").append(systemUser.getLogin()).append(" ").append(systemUser.getPassword()).toString();
            }
        };
    }
    
    @PostConstruct
    void AnswerSheetController.registerConverters() {
        conversionService.addConverter(getAnswerConverter());
        conversionService.addConverter(getAnswerSheetConverter());
        conversionService.addConverter(getDepartmentConverter());
        conversionService.addConverter(getQuestionnaireConverter());
        conversionService.addConverter(getSystemUserConverter());
    }
    
    void AnswerSheetController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("answerSheet_answereddate_date_format", DateTimeFormat.patternForStyle("SS", LocaleContextHolder.getLocale()));
    }
    
    private String AnswerSheetController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
