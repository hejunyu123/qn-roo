// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.kingkey.qn.web;

import com.kingkey.qn.domain.Department;
import com.kingkey.qn.domain.Part;
import com.kingkey.qn.domain.Questionnaire;
import com.kingkey.qn.domain.QuestionnaireType;
import com.kingkey.qn.domain.SystemUser;
import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect QuestionnaireController_Roo_Controller {
    
    @Autowired
    private GenericConversionService QuestionnaireController.conversionService;
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String QuestionnaireController.createForm(Model model) {
        model.addAttribute("questionnaire", new Questionnaire());
        addDateTimeFormatPatterns(model);
        return "questionnaires/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String QuestionnaireController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("questionnaire", Questionnaire.findQuestionnaire(id));
        model.addAttribute("itemId", id);
        return "questionnaires/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String QuestionnaireController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("questionnaires", Questionnaire.findQuestionnaireEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Questionnaire.countQuestionnaires() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("questionnaires", Questionnaire.findAllQuestionnaires());
        }
        addDateTimeFormatPatterns(model);
        return "questionnaires/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String QuestionnaireController.update(@Valid Questionnaire questionnaire, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("questionnaire", questionnaire);
            addDateTimeFormatPatterns(model);
            return "questionnaires/update";
        }
        questionnaire.merge();
        return "redirect:/questionnaires/" + encodeUrlPathSegment(questionnaire.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String QuestionnaireController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("questionnaire", Questionnaire.findQuestionnaire(id));
        addDateTimeFormatPatterns(model);
        return "questionnaires/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String QuestionnaireController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        Questionnaire.findQuestionnaire(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/questionnaires?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("departments")
    public Collection<Department> QuestionnaireController.populateDepartments() {
        return Department.findAllDepartments();
    }
    
    @ModelAttribute("parts")
    public Collection<Part> QuestionnaireController.populateParts() {
        return Part.findAllParts();
    }
    
    @ModelAttribute("systemusers")
    public Collection<SystemUser> QuestionnaireController.populateSystemUsers() {
        return SystemUser.findAllSystemUsers();
    }
    
    Converter<Department, String> QuestionnaireController.getDepartmentConverter() {
        return new Converter<Department, String>() {
            public String convert(Department department) {
                return new StringBuilder().append(department.getName()).toString();
            }
        };
    }
    
    Converter<Part, String> QuestionnaireController.getPartConverter() {
        return new Converter<Part, String>() {
            public String convert(Part part) {
                return new StringBuilder().append(part.getLabel()).append(" ").append(part.getOrderNo()).toString();
            }
        };
    }
    
    Converter<Questionnaire, String> QuestionnaireController.getQuestionnaireConverter() {
        return new Converter<Questionnaire, String>() {
            public String convert(Questionnaire questionnaire) {
                return new StringBuilder().append(questionnaire.getSubject()).append(" ").append(questionnaire.getDescription()).append(" ").append(questionnaire.getCreatedDate()).toString();
            }
        };
    }
    
    Converter<SystemUser, String> QuestionnaireController.getSystemUserConverter() {
        return new Converter<SystemUser, String>() {
            public String convert(SystemUser systemUser) {
                return new StringBuilder().append(systemUser.getName()).append(" ").append(systemUser.getLogin()).append(" ").append(systemUser.getPassword()).toString();
            }
        };
    }
    
    @PostConstruct
    void QuestionnaireController.registerConverters() {
        conversionService.addConverter(getDepartmentConverter());
        conversionService.addConverter(getPartConverter());
        conversionService.addConverter(getQuestionnaireConverter());
        conversionService.addConverter(getSystemUserConverter());
    }
    
    void QuestionnaireController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("questionnaire_createddate_date_format", DateTimeFormat.patternForStyle("SS", LocaleContextHolder.getLocale()));
    }
    
    private String QuestionnaireController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
