// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.kingkey.qn.web;

import com.kingkey.qn.domain.Part;
import com.kingkey.qn.domain.Question;
import com.kingkey.qn.domain.Questionnaire;
import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PartController_Roo_Controller {
    
    @Autowired
    private GenericConversionService PartController.conversionService;
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String PartController.show(@PathVariable("id") Long id, Model model) {
        model.addAttribute("part", Part.findPart(id));
        model.addAttribute("itemId", id);
        return "parts/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String PartController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("parts", Part.findPartEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Part.countParts() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("parts", Part.findAllParts());
        }
        return "parts/list";
    }
    
    @ModelAttribute("questions")
    public Collection<Question> PartController.populateQuestions() {
        return Question.findAllQuestions();
    }
    
    @ModelAttribute("questionnaires")
    public Collection<Questionnaire> PartController.populateQuestionnaires() {
        return Questionnaire.findAllQuestionnaires();
    }
    
    Converter<Part, String> PartController.getPartConverter() {
        return new Converter<Part, String>() {
            public String convert(Part part) {
                return new StringBuilder().append(part.getLabel()).append(" ").append(part.getOrderNo()).toString();
            }
        };
    }
    
    Converter<Question, String> PartController.getQuestionConverter() {
        return new Converter<Question, String>() {
            public String convert(Question question) {
                return new StringBuilder().append(question.getQuestion()).append(" ").append(question.getFirstLabel()).append(" ").append(question.getLastLabel()).toString();
            }
        };
    }
    
    Converter<Questionnaire, String> PartController.getQuestionnaireConverter() {
        return new Converter<Questionnaire, String>() {
            public String convert(Questionnaire questionnaire) {
                return new StringBuilder().append(questionnaire.getSubject()).append(" ").append(questionnaire.getDescription()).append(" ").append(questionnaire.getCreatedDate()).toString();
            }
        };
    }
    
    @PostConstruct
    void PartController.registerConverters() {
        conversionService.addConverter(getPartConverter());
        conversionService.addConverter(getQuestionConverter());
        conversionService.addConverter(getQuestionnaireConverter());
    }
    
    private String PartController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
